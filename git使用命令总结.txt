Git is a distributed version control system.
Git is free software.

安装后配置：
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
git config --global color.ui true
===============================================git总结======================================
git init 把当前目录变成Git可以管理的仓库
git add xxx  或git add .
git commit -m '说明' 

git status  告诉你有文件被修改过    
git diff   查看修改内容

git log --pretty=oneline 查看版本号   

git reset --hard HEAD^  回退到上一个版本
git reset --hard HEAD~100 回退往上100个版本
git reset --hard 1094a 根据查看的版本号回退到某个版本号

git reflog  查看你的每一次命令，一般用于回到未来的那个版本   
git diff HEAD -- readme.txt 查看工作区和版本库里面最新版本的区别 

git checkout -- readme.txt  
一是修改后还没有被放到暂存区，即直接丢弃工作区的修改
二是已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
总之，就是让这个文件回到最近一次git commit或git add时的状态
git reset HEAD 文件名     已经在暂存区的，可以把暂存区的修改撤销掉（unstage），重新放回工作区，然后可再丢弃工作区即可清理干净

git rm  xxx     删掉，并且git commit：
git checkout -- test.txt    也可以用做删除恢复,从版本库恢复，但是本次修改魏提交的内容无法恢复

-------------------------------------远程仓库关联----------------------------------
把本地仓库与远程github仓库关联,起别名
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
git remote add origin git@github.com:andyleisure/learngit.git
git remote add origin https://github.com/michaelliao/gitskills.git

推送内容
git push -u origin master 把本地库的所有内容推送到远程库上，实际上是把当前分支master推送到远程
我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过命令：
git push origin master

从0开发，先在远程库创建项目，然后大家克隆 
git clone git@github.com:andyleisure/gitskills.git

--------------------------------------------------分支操作---------------------------------------------------

创建dev分支，然后切换到dev分支：相当于两条命令： git branch dev，git checkout dev
git checkout -b dev

git branch 查看当前分支

git branch -a(查看所有分支包括本地分支和远程分支).
git branch -r(查看远程分支).

......在dev分支修改内容，并提交本地库......

git checkout master  切换回master分支

合并指定分支dev到当前分支master， 直接把master指针指向dev的当前提交，就完成了合并
git merge dev  
git merge --no-ff -m "merge with no-ff" dev  
强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

删除dev分支
git branch -d dev

因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
看到分支的合并情况
git log --graph --pretty=oneline --abbrev-commit 

修复bug时，创建bug分支
git stash 把当前工作现场“暂存”起来，等以后恢复现场后继续工作，用git status查看工作区 是干净的

修复完其他bug后，继续在dev分支干活
git stash list 看看之前工作现场
stash@{0}: WIP on dev: f52c633 add merge

git stash pop  恢复的同时把stash内容也删了, git stash apply恢复，stash内容并不删除
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}

复制一个可能在其他分支上修改的特定的提交到当前分支
$ git branch
* dev
  master
$ git cherry-pick 4c805e2
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动

----------------------------多人协作-----------------------
git remote -v 要查看远程库的信息
git push origin dev或git push origin master 把本地库dev分支上的所有本地提交推送到远程库
并不是一定要把本地分支往远程推送
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

其他小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支
创建远程origin的dev分支到本地，在本地开发dev分支
git checkout -b dev origin/dev
git push origin dev 提交本地dev分支到远程dev分支
如果当前自己也在改分支上push，就会冲突,需要先git pull
git branch --set-upstream-to=origin/dev dev  指定本地dev分支与远程origin/dev分支的链接

多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

-------------------------------------打标签-------------------------------------------------
git checkout master  
git tag v1.0 打标签
git tag v0.9 f52c633  对应的commit id是f52c633打标签
git tag -a v0.1 -m "version 0.1 released" 1094adb
git tag查看   git show v0.9
标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
git tag -d v0.1 删
git push origin v1.0 要推送某个标签到远程
git push origin --tags 一次性推送全部尚未推送到远程的本地标签
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：
git push origin :refs/tags/v0.9

--------------------------------
能不能既关联GitHub，又关联Gitee呢
git remote rm origin 先删除已关联的名为origin的远程库
git remote add github git@github.com:andyleisre/learngit.git 关联GitHub的远程库
git remote add gitee  git@gitee.com:andyleisre/learngit.git再关联Gitee的远程库
git remote -v 查看远程库信息
git push github master 推送
git push gitee master

在Git conf配置 即可以git push origin master同时提交2个远程仓库
git remote set-url --add origin https://github.com/xueleilei/nuxt-ssr-template.git
